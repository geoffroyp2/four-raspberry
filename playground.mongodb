// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

/*
export interface ProgramInfo {
  id: number;
  name: string;
  description?: string;
  graph: Graph;
}

export interface Graph {
  color: Color;
  points: Point[];
}
// */

const generatePoints = () => {
  return [...Array(20)].map((p,pi)=> {
    return {
      x: pi * 1000* 60 * 30, 
      y: Math.floor(10 + Math.random() * 5  + ((46+ Math.random()*0.5)*3*pi*Math.log10((3*pi) > 0 ? (3*pi) : 1)) - (9*pi*pi))
    }
  })
}


use("four");
db.graphs.updateMany({graphType: true},{$set: {points: generatePoints()}})


// use("test");
// db.dropDatabase();
// use("four");
// db.testGraph.drop()

// // Select the database to use.
// use('four');

// db.testGraph.insertMany([
//   {
//     '_id': 1, 
//     'name': 'graph 1', 
//     'description': 'graph 1 description',
//     'graph': {
//       'color': {
//         'r': 230,
//         'g': 30,
//         'b': 30,
//         'a': 0.9
//       },
//       'points': [
//         {'x': 0, 'y': 20},
//         {'x': 1, 'y': 40},
//         {'x': 2, 'y': 90},
//         {'x': 3, 'y': 150},
//         {'x': 4, 'y': 210},
//         {'x': 5, 'y': 290},
//         {'x': 7, 'y': 370},
//         {'x': 8, 'y': 500},
//         {'x': 9, 'y': 650}
//       ]
//     }
//   },
//   {
//     '_id': 2, 
//     'name': 'graph 2', 
//     'description': 'graph 2 description',
//     'graph': {
//       'color': {
//         'r': 30,
//         'g': 230,
//         'b': 30,
//         'a': 0.9
//       },
//       'points': [
//         {'x': 0, 'y': 20},
//         {'x': 1, 'y': 70},
//         {'x': 2, 'y': 170},
//         {'x': 3, 'y': 300},
//         {'x': 4, 'y': 480},
//         {'x': 5, 'y': 610},
//         {'x': 7, 'y': 800},
//         {'x': 8, 'y': 920},
//         {'x': 9, 'y': 1020}
//       ]
//     }
//   }
// ]);


// The drop() command destroys all data from a collection.
// Make sure you run it against proper database and collection.
// db.sales.drop();

// // Insert a few documents into the sales collection.
// db.sales.insertMany([
//   { '_id' : 1, 'item' : 'abc', 'price' : 10, 'quantity' : 2, 'date' : new Date('2014-03-01T08:00:00Z') },
//   { '_id' : 2, 'item' : 'jkl', 'price' : 20, 'quantity' : 1, 'date' : new Date('2014-03-01T09:00:00Z') },
//   { '_id' : 3, 'item' : 'xyz', 'price' : 5, 'quantity' : 10, 'date' : new Date('2014-03-15T09:00:00Z') },
//   { '_id' : 4, 'item' : 'xyz', 'price' : 5, 'quantity' :  20, 'date' : new Date('2014-04-04T11:21:39.736Z') },
//   { '_id' : 5, 'item' : 'abc', 'price' : 10, 'quantity' : 10, 'date' : new Date('2014-04-04T21:23:13.331Z') },
//   { '_id' : 6, 'item' : 'def', 'price' : 7.5, 'quantity': 5, 'date' : new Date('2015-06-04T05:08:13Z') },
//   { '_id' : 7, 'item' : 'def', 'price' : 7.5, 'quantity': 10, 'date' : new Date('2015-09-10T08:43:00Z') },
//   { '_id' : 8, 'item' : 'abc', 'price' : 10, 'quantity' : 5, 'date' : new Date('2016-02-06T20:20:13Z') },
// ]);

// // Run a find command to view items sold on April 4th, 2014.
// db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// // Run an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id : '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];
// db.sales.aggregate(aggregation);
